<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>庸的博客</title>
  
  <subtitle>爱代码,爱生活~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-10T02:30:59.182Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HSR</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux系统编程-线程</title>
    <link href="http://yoursite.com/2019/09/10/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B-%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/09/10/Linux系统编程-线程/</id>
    <published>2019-09-10T02:00:27.247Z</published>
    <updated>2019-09-10T02:30:59.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程概念"><a href="#线程概念" class="headerlink" title="线程概念"></a>线程概念</h2><p>LWP：light weight process 轻量级的进程，本质仍是进程(在Linux环境下)<br>进程：独立地址空间，拥有PCB<br>线程：也有PCB，但没有独立的地址空间(共享)<br>区别：在于是否共享地址空间。    独居(进程)；合租(线程)。<br>Linux下：    线程：最小的执行单位<br>             进程：最小分配资源单位，可看成是只有一个线程的进程。</p><figure class="image-box">                <img src="/2019/09/10/Linux系统编程-线程/Hexo\source\_posts\Linux系统编程-线程\p1.png" alt="." title class>                <p>.</p>            </figure><h3 id="Linux内核线程实现原理"><a href="#Linux内核线程实现原理" class="headerlink" title="Linux内核线程实现原理"></a><strong>Linux内核线程实现原理</strong></h3><p>类Unix系统中，早期是没有“线程”概念的，80年代才引入，借助进程机制实现出了线程的概念。因此在这类系统中，进程和线程关系密切。</p><ol><li><p>轻量级进程(light-weight process)，也有PCB，创建线程使用的底层函数和进程一样，都是clone</p></li><li><p>从内核里看进程和线程是一样的，都有各自不同的PCB，但是PCB中指向内存资源的三级页表是相同的</p></li><li><p>进程可以蜕变成线程</p></li><li><p>线程可看做寄存器和栈的集合</p></li><li><p>在linux下，线程最是小的执行单位；进程是最小的分配资源单位</p></li></ol><p>察看LWP号：ps –Lf pid 查看指定线程的lwp号。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;线程概念&quot;&gt;&lt;a href=&quot;#线程概念&quot; class=&quot;headerlink&quot; title=&quot;线程概念&quot;&gt;&lt;/a&gt;线程概念&lt;/h2&gt;&lt;p&gt;LWP：light weight process 轻量级的进程，本质仍是进程(在Linux环境下)&lt;br&gt;进程：独立地址空间
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux系统编程-信号</title>
    <link href="http://yoursite.com/2019/09/08/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B-%E4%BF%A1%E5%8F%B7/"/>
    <id>http://yoursite.com/2019/09/08/Linux系统编程-信号/</id>
    <published>2019-09-08T02:30:53.000Z</published>
    <updated>2019-09-08T16:41:04.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信号的概念"><a href="#信号的概念" class="headerlink" title="信号的概念"></a>信号的概念</h2><p>信号在我们的生活中随处可见， 如：古代战争中摔杯为号；现代战争中的信号弹；体育比赛中使用的信号枪……他们都有共性：1. 简单 2. 不能携带大量信息 3. 满足某个特设条件才发送。</p><p>信号是信息的载体，Linux/UNIX 环境下，古老、经典的通信方式， 现下依然是主要的通信手段。</p><p>Unix早期版本就提供了信号机制，但不可靠，信号可能丢失。Berkeley 和 AT&amp;T都对信号模型做了更改，增加了可靠信号机制。但彼此不兼容。POSIX.1对可靠信号例程进行了标准化。</p><h2 id="信号的机制"><a href="#信号的机制" class="headerlink" title="信号的机制"></a>信号的机制</h2><p>A给B发送信号，B收到信号之前执行自己的代码，收到信号后，不管执行到程序的什么位置，都要暂停运行，去处理信号，处理完毕再继续执行。与硬件中断类似——异步模式。但信号是软件层面上实现的中断，早期常被称为“软中断”。</p><p>信号的特质：由于信号是通过软件方法实现，其实现手段导致信号有很强的延时性。但对于用户来说，这个延迟时间非常短，不易察觉。</p><h2 id="与信号相关的事件和状态"><a href="#与信号相关的事件和状态" class="headerlink" title="与信号相关的事件和状态"></a>与信号相关的事件和状态</h2><h3 id="产生信号"><a href="#产生信号" class="headerlink" title="产生信号:"></a>产生信号:</h3><ol><li>按键产生，如：Ctrl+c、Ctrl+z、Ctrl+\</li><li>系统调用产生，如：kill、raise、abort</li><li>软件条件产生，如：定时器alarm</li><li>硬件异常产生，如：非法访问内存(段错误)、除0(浮点数例外)、内存对齐出错(总线错误)</li><li>命令产生，如：kill命令</li></ol><h3 id="递达："><a href="#递达：" class="headerlink" title="递达："></a>递达：</h3><p>递送并且到达进程。</p><h3 id="未决："><a href="#未决：" class="headerlink" title="未决："></a>未决：</h3><p>产生和递达之间的状态。主要由于阻塞(屏蔽)导致该状态。 </p><h3 id="信号的处理方式"><a href="#信号的处理方式" class="headerlink" title="信号的处理方式:"></a>信号的处理方式:</h3><ol><li>执行默认动作 </li><li>忽略(丢弃) </li><li>捕捉(调用户处理函数)<br> Linux内核的进程控制块PCB是一个结构体，task_struct, 除了包含进程id，状态，工作目录，用户id，组id，文件描述符表，还包含了信号相关的信息，主要指阻塞信号集和未决信号集。</li></ol><h3 id="阻塞信号集-信号屏蔽字-："><a href="#阻塞信号集-信号屏蔽字-：" class="headerlink" title="阻塞信号集(信号屏蔽字)："></a>阻塞信号集(信号屏蔽字)：</h3><p>将某些信号加入集合，对他们设置屏蔽，当屏蔽x信号后，再收到该信号，该信号的处理将推后(解除屏蔽后)</p><h3 id="未决信号集"><a href="#未决信号集" class="headerlink" title="未决信号集:"></a>未决信号集:</h3><p>1.信号产生，未决信号集中描述该信号的位立刻翻转为1，表信号处于未决状态。当信号被处理对应位翻转回为0。这一时刻往往非常短暂。<br>2.信号产生后由于某些原因(主要是阻塞)不能抵达。这类信号的集合称之为未决信号集。在屏蔽解除前，信号一直处于未决状态。</p><h2 id="信号的编号"><a href="#信号的编号" class="headerlink" title="信号的编号"></a>信号的编号</h2><p>可以使用kill –l命令查看当前系统可使用的信号有哪些。<br>1) SIGHUP     2) SIGINT     3) SIGQUIT     4) SIGILL         5) SIGTRAP<br>6) SIGABRT     7) SIGBUS     8) SIGFPE     9) SIGKILL    10) SIGUSR1<br>11) SIGSEGV    12) SIGUSR2    13) SIGPIPE    14) SIGALRM    15) SIGTERM<br>16) SIGSTKFLT    17) SIGCHLD    18) SIGCONT    19) SIGSTOP    20) SIGTSTP<br>21) SIGTTIN    22) SIGTTOU    23) SIGURG    24) SIGXCPU    25) SIGXFSZ<br>26) SIGVTALRM    27) SIGPROF    28) SIGWINCH    29) SIGIO    30) SIGPWR<br>31) SIGSYS    34) SIGRTMIN    35) SIGRTMIN+1    36) SIGRTMIN+2    37) SIGRTMIN+3<br>38) SIGRTMIN+4    39) SIGRTMIN+5    40) SIGRTMIN+6    41) SIGRTMIN+7    42) SIGRTMIN+8<br>43) SIGRTMIN+9    44) SIGRTMIN+10    45) SIGRTMIN+11    46) SIGRTMIN+12    47) SIGRTMIN+13<br>48) SIGRTMIN+14    49) SIGRTMIN+15    50) SIGRTMAX-14    51) SIGRTMAX-13    52) SIGRTMAX-12<br>53) SIGRTMAX-11    54) SIGRTMAX-10    55) SIGRTMAX-9    56) SIGRTMAX-8    57) SIGRTMAX-7<br>58) SIGRTMAX-6    59) SIGRTMAX-5    60) SIGRTMAX-4    61) SIGRTMAX-3    62) SIGRTMAX-2<br>63) SIGRTMAX-1    64) SIGRTMAX<br>不存在编号为0的信号。其中1-31号信号称之为常规信号（也叫普通信号或标准信号），34-64称之为实时信号，驱动编程与硬件相关。名字上区别不大。而前32个名字各不相同。</p><h2 id="信号4要素"><a href="#信号4要素" class="headerlink" title="信号4要素"></a>信号4要素</h2><p>与变量三要素类似的，每个信号也有其必备4要素，分别是：</p><ol><li>编号 2. 名称 3. 事件 4. 默认处理动作</li></ol><p>可通过man 7 signal查看帮助文档获取。也可查看/usr/src/linux-headers-3.16.0-30/arch/s390/include/uapi/asm/signal.h<br>注意从man 7 signal帮助文档中可看到 : The signals SIGKILL and SIGSTOP cannot be caught, blocked, or ignored.<br>这里特别强调了9) SIGKILL 和19) SIGSTOP信号，不允许忽略和捕捉，只能执行默认动作。甚至不能将其设置为阻塞。<br>另外需清楚，只有每个信号所对应的事件发生了，该信号才会被递送(但不一定递达)，不应乱发信号！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信号的概念&quot;&gt;&lt;a href=&quot;#信号的概念&quot; class=&quot;headerlink&quot; title=&quot;信号的概念&quot;&gt;&lt;/a&gt;信号的概念&lt;/h2&gt;&lt;p&gt;信号在我们的生活中随处可见， 如：古代战争中摔杯为号；现代战争中的信号弹；体育比赛中使用的信号枪……他们都有共性：1
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
